package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"

	"github.com/99designs/gqlgen/graphql"
	"github.com/derek-tom-coding/guitar-rig/graph/model"
	"github.com/google/uuid"
)

// helper function to save uploaded file to disk
func saveUploadedFile(file graphql.Upload, uploadsDir, jobID string) (string, error) {
	// if /uploads not there, make the folder.
	if _, err := os.Stat(uploadsDir); os.IsNotExist(err) {
		if err := os.Mkdir(uploadsDir, os.ModePerm); err != nil {
			return "", fmt.Errorf("failed to create uploads directory: %w", err)
		}
	}

	// create destination file
	filename := filepath.Join(uploadsDir, jobID+"_"+file.Filename)
	outFile, err := os.Create(filename)
	if err != nil {
		return "", fmt.Errorf("failed to create file: %w", err)
	}
	defer outFile.Close()

	if _, err := io.Copy(outFile, file.File); err != nil {
		return "", fmt.Errorf("failed to save file: %w", err)
	}

	return filename, nil
}

// UploadAudio is the resolver for the uploadAudio field.
func (r *mutationResolver) UploadAudio(ctx context.Context, file graphql.Upload) (*model.Job, error) {
	jobID := uuid.New().String()

	// saves the uploaded file to disk
	filename, err := saveUploadedFile(file, "uploads", jobID)
	if err != nil {
		return nil, err
	}

	// Make job
	job := &model.Job{
		ID:       jobID,
		Filename: filename,
		Status:   "UPLOADED",
	}
	r.jobs = append(r.Resolver.jobs, job)

	log.Printf("Received file upload: %s, saved to %s", file.Filename, filename)
	return job, nil
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context) ([]*model.Job, error) {
	return r.Resolver.jobs, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
